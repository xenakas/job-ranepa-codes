# install.packages("devtools")
devtools::install_github("tidyverts/fasster")
version$version.string
version
rprofile_path = file.path(Sys.getenv("HOME"), ".Rprofile")
write('\noptions(repos=c(getOption(\'repos\'),
CRAN=\'https://cloud.r-project.org\',
USGS=\'https://owi.usgs.gov/R\'))\n',
rprofile_path,
append =  TRUE)
cat('Your Rprofile has been updated to include GRAN.
Please restart R for changes to take effect.')
version
RStudio.version()
versionInfo()
require(rstudioapi)
versionInfo()
install.packages("fablelite")
devtools::install_github("tidyverts/fablelite")
install.packages("dplyr")
devtools::install_github("tidyverts/fasster")
# install.packages("devtools")
devtools::install_github("tidyverse/dplyr@rc_0.8.0")
# install.packages("devtools")
devtools::install_github("tidyverse/dplyr@rc_0.8.0.9008")
# install.packages("devtools")
devtools::install_github("tidyverse/dplyr@rc_0.8.0.9009")
# install.packages("devtools")
devtools::install_github("tidyverse/dplyr@rc_0.8.0.9009")
install.packages("pnmath_0.0-4.tar.gz", repos=NULL)
install.packages(c("multicore", "foreach", "doMC", "doSNOW"))
install.packages("foreach")
install.packages("doMC")
install.packages("doSNOW")
install.packages("doParallel")
install.packages("multicore_0.2.tar.gz", repos=NULL)
install.packages("pnmath_0.0-4.tar.gz", repos=NULL)
install.packages("gpuR")
install.packages("cudaBayesreg_0.3-16.tar.gz", repos=NULL)
install.packages("cudaBayesregData_0.3-11.tar.gz", repos=NULL)
install.packages("oro.nifti")
install.packages("cudaBayesreg_0.3-16.tar.gz", repos=NULL)
install.packages("cudaBayesreg_0.3-16.tar.gz", repos=NULL)
install.packages("cudaBayesreg_0.3-16.tar.gz", repos=NULL)
install.packages("cudaBayesreg_0.3-16.tar.gz", repos=NULL)
install.packages("cudaBayesreg_0.3-16.tar.gz", repos=NULL)
install.packages("cudaBayesreg_0.3-16.tar.gz", repos=NULL)
R CMD INSTALL cudaBayesreg_0.3-16.tar.gz
install.packages("cudaBayesreg_0.3-16.tar.gz", repos=NULL)
library(cluster)
data = read.csv(file="/home/xenakas/Desktop/Git/hierarchical_modelling/data/rus/rus_vrp_ind.csv", header = TRUE, sep = ",")
#data <- subset(data, X!= 0)
data$X <- NULL
dim(data)
data[is.na(data)] <- 0
library(TSclust)
D3 <- diss(data[,1:20], "DTWARP")
View(data)
D3
D3[1]
D3[[1]]
D3[1]
D3 <- diss(data[,1:20], "DTWARP")
D3
d2 <- diss(data, "EUCL")
d2
D3
D3[1:7]
diss_mat_dtw  <- matrix(, nrow = dim(df_eu)[2], ncol = dim(df_eu)[2])
diss_mat_dtw  <- matrix(, nrow = dim(data[,1:20])[2], ncol = dim(data[,1:20])[2])
D3[1:21]
for (i in 1:dim(data[,1:20])[2]){
for (j in 1:dim(data[,1:20])[2]){
i <- i + 2
print(i)
# diss_mat_dtw[j,i] <- D3[i]
}
}
for (j in 1:dim(data[,1:20])[2]){
i <- i + 5
print(i)
# diss_mat_dtw[j,i] <- D3[i]
}
for (i in 1:dim(data[,1:20])[2]){
for (j in 1:dim(data[,1:20])[2]){
i <- i + 5
print(i)
# diss_mat_dtw[j,i] <- D3[i]
}
}
for (i in 1:dim(data[,1:20])[2]){
for (j in 1:dim(data[,1:20])[2]){
i <- i + 5
print(i)
# diss_mat_dtw[j,i] <- D3[i]
}
}
for (i in 1:dim(data[,1:20])[2]){
# for (j in 1:dim(data[,1:20])[2]){
i <- i + 5
print(i)
# diss_mat_dtw[j,i] <- D3[i]
# }
}
while (i <= dim(data[,1:20])[2]){
while (j <= 1:dim(data[,1:20])[2]){
i <- i + j
diss_mat_dtw[i,j] <- D3[i+j]
}
j <-j+1
}
diss_mat_dtw
diss_mat_dtw  <- matrix(, nrow = dim(data[,1:20])[2], ncol = dim(data[,1:20])[2])
while (i <= dim(data[,1:20])[2]){
while (j <= 1:dim(data[,1:20])[2]){
i <- i + j
diss_mat_dtw[i,j] <- D3[i+j]
}
j <-j+1
}
diss_mat_dtw
i=1
j=1
while (i <= dim(data[,1:20])[2]){
while (j <= 1:dim(data[,1:20])[2]){
i <- i + j
diss_mat_dtw[i,j] <- D3[i+j]
}
j <-j+1
}
diss_mat_dtw
i=1
j=1
while (i <= dim(data[,1:20])[2]){
i = 1
while (j <= 1:dim(data[,1:20])[2]){
i <- i + j
diss_mat_dtw[i,j] <- D3[i+j]
}
j <-j+1
}
diss_mat_dtw
i=1
j=1
while (i <= dim(data[,1:20])[2]){
i = 1
while (j <= 1:dim(data[,1:20])[2]){
i <- i + j
diss_mat_dtw[i,j] <- D3[i+j]
}
j <-j+1
}
diss_mat_dtw
i=1
j=1
while (i <= dim(data[,1:20])[2]){
i <- i + j
while (j <= 1:dim(data[,1:20])[2]){
diss_mat_dtw[i,j] <- D3[i+j]
i <- i + 1
}
j <-j+1
}
diss_mat_dtw
i=1
j=1
while (i <= dim(data[,1:20])[2]){
i <- i + j
while (j <= 1:dim(data[,1:20])[2]){
diss_mat_dtw[i,j] <- D3[i+j]
i <- i + 1
print(i, j)
}
j <-j+1
}
i=1
j=1
while (i <= dim(data[,1:20])[2]){
i <- j
while (j <= 1:dim(data[,1:20])[2]){
diss_mat_dtw[i,j] <- D3[i+j]
i <- i + 1
print(i, j)
}
j <-j+1
}
i=1
j=1
while (i <= dim(data[,1:20])[2]){
i <- j
while (j <= 1:dim(data[,1:20])[2]){
# diss_mat_dtw[i,j] <- D3[i+j]
i <- i + 1
print(i, j)
}
j <-j+1
}
i=1
j=1
while (i <= dim(data[,1:20])[2]) and (j <= 1:dim(data[,1:20])[2]) {
i <- j
# diss_mat_dtw[i,j] <- D3[i+j]
i <- i + 1
print(i, j)
j <-j+1
}
i=1
j=1
while ((i <= dim(data[,1:20])[2]) and (j <= 1:dim(data[,1:20])[2])) {
i <- j
# diss_mat_dtw[i,j] <- D3[i+j]
i <- i + 1
print(i, j)
j <-j+1
}
i=1
j=1
while ((i <= dim(data[,1:20])[2]) and (j <= 1:dim(data[,1:20])[2])) {
i <- j
# diss_mat_dtw[i,j] <- D3[i+j]
i <- i + 1
print(i, j)
j <-j+1
}
i=1
j=1
while ((i <= dim(data[,1:20])[2]) & (j <= 1:dim(data[,1:20])[2])) {
i <- j
# diss_mat_dtw[i,j] <- D3[i+j]
i <- i + 1
print(i, j)
j <-j+1
}
i=1
j=1
while ((i <= dim(data[,1:20])[2]) & (j <= 1:dim(data[,1:20])[2])) {
i <- j
# diss_mat_dtw[i,j] <- D3[i+j]
i <- i + 1
print(i, j)
j <-j+1
}
i=1
j=1
while ((i <= dim(data[,1:20])[2]) & (j <= 1:dim(data[,1:20])[2])) {
# i <- j
# diss_mat_dtw[i,j] <- D3[i+j]
i <- i + 1
print(i, j)
j <-j+1
}
diss_mat_dtw
i=1
j=1
while ((i <= dim(data[,1:20])[2]) & (j <= 1:dim(data[,1:20])[2])) {
# i <- j
# diss_mat_dtw[i,j] <- D3[i+j]
i <- i + 1
print(i, j)
j <-j+1
}
i=1
j=1
while ((i <= dim(data[,1:20])[2]) & (j <= 1:dim(data[,1:20])[2])) {
# i <- j
# diss_mat_dtw[i,j] <- D3[i+j]
i <- i + 1
# print(i, j)
j <-j+1
}
i=1
j=1
while (i <= dim(data[,1:20])[2]){
i <- i+1
while (j <= 1:dim(data[,1:20])[2]){
# diss_mat_dtw[i,j] <- D3[i+j]
i <- i + 1
print(i, j)
}
j <-j+1
}
i=1
j=1
while (i <= dim(data[,1:20])[2]){
i <- i+1
i <- i + 1
print(i, j)
j <-j+1
}
i=1
j=1
while (i <= dim(data[,1:20])[2]){
i <- i+1
print(i, j)
j <-j+1
}
diss_mat_dtw
i=1
j=1
while (i <= dim(data[,1:20])[2]){
i <- i+1
print("(", i, j, ")")
j <-j+1
}
i=1
j=1
while (i <= dim(data[,1:20])[2]){
i <- i+1
cat("(", i, j, ")")
j <-j+1
}
diss_mat_dtw
i=1
j=1
while (i <= dim(data[,1:20])[2]){
i <- i+1
cat("(", i, j, ")")
j <-j+1
}
0
i=1
j=1
while (i <= dim(data[,1:20])[2]){
i <- i+1
cat("(", i, j, ")")
j <-j+1
}
0
i=1
j=1
while (i <= dim(data[,1:20])[2]){
for (j in i:dim(data[,1:20])[2]){
cat("(", i, j, ")")
}
i <-i+1
}
i=2
j=1
while (i <= dim(data[,1:20])[2]){
for (j in i:dim(data[,1:20])[2]){
cat("(", i, j, ")")
}
i <-i+1
}
i=1
j=1
while (i <= dim(data[,1:20])[2]){
for (j in i:dim(data[,1:20])[2]){
cat("(", j, i, ")")
}
i <-i+1
}
i=1
j=2
while (i <= dim(data[,1:20])[2]){
for (j in i:dim(data[,1:20])[2]){
cat("(", j, i, ")")
}
i <-i+1
}
i=1
j=2
while (i <= dim(data[,1:20])[2]){
for (j in i:dim(data[,1:20])[2]){
cat("(", j, i, ")")
}
i <-i+1
}
i=1
j=1
while (i <= dim(data[,1:20])[2]){
for (j in (i+1):dim(data[,1:20])[2]){
cat("(", j, i, ")")
}
i <-i+1
}
D3
D3[1]
D3[50]
D3[50:60]
i=1
j=1
while (i <= dim(data[,1:20])[2]){
for (j in (i+1):dim(data[,1:20])[2]){
cat("(", j, i, ")")
}
i <-i+1
}
diss_mat_dtw  <- matrix(NA, nrow = dim(data[,1:20])[2], ncol = dim(data[,1:20])[2])
diss_mat_dtw  <- matrix(NA, nrow = dim(data[,1:20])[2], ncol = dim(data[,1:20])[2])
diss_mat_dtw  <- matrix(, nrow = dim(data[,1:20])[2], ncol = dim(data[,1:20])[2])
diss_mat_dtw  <- matrix(NA, nrow = dim(data[,1:20])[2], ncol = dim(data[,1:20])[2])
i=1
j=1
a=1
while (i <= dim(data[,1:20])[2]){
for (j in (i+1):dim(data[,1:20])[2]){
# cat("(", j, i, ")")
diss_mat_dtw[j,i] <-  D3[a]
}
i <-i+1
}
diss_mat_dtw
i=1
j=1
a=1
while (i <= dim(data[,1:20])[2]){
for (j in (i+1):dim(data[,1:20])[2]){
# cat("(", j, i, ")")
diss_mat_dtw[j,i] <-  D3[a]
a <- a+1
}
i <-i+1
}
diss_mat_dtw
D3
D3
i=1
j=1
a=1
while (i <= dim(data[,1:20])[2]){
for (j in (i+1):dim(data[,1:20])[2]){
cat("(", j, i, ")")
# diss_mat_dtw[j,i] <-  D3[a]
a <- a+1
}
i <-i+1
}
i=1
j=1
a=1
while (i < dim(data[,1:20])[2]){
for (j in (i+1):dim(data[,1:20])[2]){
cat("(", j, i, ")")
# diss_mat_dtw[j,i] <-  D3[a]
a <- a+1
}
i <-i+1
}
diss_mat_dtw
diss_mat_dtw  <- matrix(NA, nrow = dim(data[,1:20])[2], ncol = dim(data[,1:20])[2])
i=1
j=1
a=1
while (i < dim(data[,1:20])[2]){
for (j in (i+1):dim(data[,1:20])[2]){
# cat("(", j, i, ")")
diss_mat_dtw[j,i] <-  D3[a]
a <- a+1
}
i <-i+1
}
diss_mat_dtw
install.packages("cudaBayesreg_0.3-16.tar.gz", repos=NULL)
install.packages("arm")
install.packages("emdbook")
install.packages(c("rstan", "rstanarm"))
library(rstan)
library(rstanarm)
install.packages("stringi")
library(rstanarm)
install.packages("multDM")
install.packages("EnvStats")
install.packages("formatR")
install.packages("rusquant", repos = "http://R-Forge.R-project.org", type = "source")
lsf.str("package:rusquant")
getSymbols(‘AFLT’,src=’Finam’)
getSymbols('AFLT',src='Finam')
install_git(‘arbuzovv/rusquant’)
install_git('arbuzovv/rusquant')
devtools::install_git('arbuzovv/rusquant')
install_github("arbuzovv/rusquant")
devtools::install_git('arbuzovv/rusquant')
install.packages("rusquant", repos="http://R-Forge.R-project.org")
library(rusquant)
getSymbols("SPFB.GOLD", from=Sys.Date()-5, src="Finam", period="5min") #period="hour")
library(rustfare)
ind <- IndicatorRosstat()
install.packages("tabulizer")
install.packages("rJava")
install.packages("tabulizer")
install.packages("robotstxt")
install.packages("janitor")
install.packages("xlsx")
readRDS('small_df.rds')
setwd("~/Desktop/job_job/parse_goszakupki/parse_all")
readRDS('small_df.rds')
df <-  readRDS('small_df.rds')
View(df)
options(java.parameters = "-Xmx8000m")
options(java.parameters = "-Xmx8000m")
library(readxl)
library(xlsx)
write.xlsx(df, 'small_goszak_no_duplicates.xlsx')
